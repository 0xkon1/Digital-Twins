src.flood_model.bg_flood_model
==============================

.. py:module:: src.flood_model.bg_flood_model

.. autoapi-nested-parse::

   This script handles the processing of input files for the BG-Flood Model, executes the flood model, stores the
   resulting model output metadata in the database, and incorporates the model output into GeoServer for visualization.



Attributes
----------

.. autoapisummary::

   src.flood_model.bg_flood_model.log
   src.flood_model.bg_flood_model.Base
   src.flood_model.bg_flood_model.sample_polygon


Classes
-------

.. autoapisummary::

   src.flood_model.bg_flood_model.BGFloodModelOutput
   src.flood_model.bg_flood_model.LogLevel


Functions
---------

.. autoapisummary::

   src.flood_model.bg_flood_model.create_table
   src.flood_model.bg_flood_model.check_table_exists
   src.flood_model.bg_flood_model.setup_logging
   src.flood_model.bg_flood_model.get_catchment_area
   src.flood_model.bg_flood_model.find_flooded_buildings
   src.flood_model.bg_flood_model.store_flooded_buildings_in_database
   src.flood_model.bg_flood_model.add_model_output_to_geoserver
   src.flood_model.bg_flood_model.get_valid_bg_flood_dir
   src.flood_model.bg_flood_model.get_new_model_output_path
   src.flood_model.bg_flood_model.get_model_output_metadata
   src.flood_model.bg_flood_model.store_model_output_metadata_to_db
   src.flood_model.bg_flood_model.model_output_from_db_by_id
   src.flood_model.bg_flood_model.model_extents_from_db_by_id
   src.flood_model.bg_flood_model.add_crs_to_model_output
   src.flood_model.bg_flood_model.process_rain_input_files
   src.flood_model.bg_flood_model.process_boundary_input_files
   src.flood_model.bg_flood_model.process_river_input_files
   src.flood_model.bg_flood_model.prepare_bg_flood_model_inputs
   src.flood_model.bg_flood_model.run_bg_flood_model
   src.flood_model.bg_flood_model.main


Module Contents
---------------

.. py:class:: BGFloodModelOutput

   Bases: :py:obj:`Base`


   Class representing the 'bg_flood_model_output' table.

   .. attribute:: __tablename__

      Name of the database table.

      :type: str

   .. attribute:: unique_id

      Unique identifier for each entry (primary key).

      :type: int

   .. attribute:: file_name

      Name of the flood model output file.

      :type: str

   .. attribute:: file_path

      Path to the flood model output file.

      :type: str

   .. attribute:: created_at

      Timestamp indicating when the output was created.

      :type: datetime

   .. attribute:: geometry

      Geometric representation of the catchment area coverage.

      :type: Polygon


   .. py:attribute:: __tablename__
      :value: 'bg_flood_model_output'



   .. py:attribute:: unique_id


   .. py:attribute:: file_name


   .. py:attribute:: file_path


   .. py:attribute:: created_at


   .. py:attribute:: geometry


.. py:function:: create_table(engine: sqlalchemy.engine.Engine, table: Base) -> None

   Create a table in the database if it doesn't already exist, using the provided engine.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param table: Class representing the table to create.
   :type table: Base

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: check_table_exists(engine: sqlalchemy.engine.Engine, table_name: str, schema: str = 'public') -> bool

   Check if a table exists in the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param table_name: The name of the table to check for existence.
   :type table_name: str
   :param schema: The name of the schema where the table resides. Defaults to "public".
   :type schema: str = "public"

   :returns: True if the table exists, False otherwise.
   :rtype: bool


.. py:class:: LogLevel

   Bases: :py:obj:`enum.IntEnum`


   Enum class representing different logging levels mapped to their corresponding numeric values from the
   logging library.

   .. attribute:: CRITICAL

      The critical logging level. Corresponds to logging.CRITICAL (50).

      :type: int

   .. attribute:: ERROR

      The error logging level. Corresponds to logging.ERROR (40).

      :type: int

   .. attribute:: WARNING

      The warning logging level. Corresponds to logging.WARNING (30).

      :type: int

   .. attribute:: INFO

      The info logging level. Corresponds to logging.INFO (20).

      :type: int

   .. attribute:: DEBUG

      The debug logging level. Corresponds to logging.DEBUG (10).

      :type: int

   .. attribute:: NOTSET

      The not-set logging level. Corresponds to logging.NOTSET (0).

      :type: int


   .. py:attribute:: CRITICAL


   .. py:attribute:: ERROR


   .. py:attribute:: WARNING


   .. py:attribute:: INFO


   .. py:attribute:: DEBUG


   .. py:attribute:: NOTSET


.. py:function:: setup_logging(log_level: LogLevel = LogLevel.INFO) -> None

   Configures the root logger with the specified log level and formats, captures warnings, and excludes specific
   loggers from propagating their messages to the root logger. Additionally, logs a debug message indicating the
   execution of the function in the script.

   :param log_level: The log level to set for the root logger. Defaults to LogLevel.DEBUG.
                     The available logging levels and their corresponding numeric values are:
                     - LogLevel.CRITICAL (50)
                     - LogLevel.ERROR (40)
                     - LogLevel.WARNING (30)
                     - LogLevel.INFO (20)
                     - LogLevel.DEBUG (10)
                     - LogLevel.NOTSET (0)
   :type log_level: LogLevel = LogLevel.DEBUG

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: get_catchment_area(catchment_area: geopandas.GeoDataFrame, to_crs: int = 2193) -> geopandas.GeoDataFrame

   Convert the coordinate reference system (CRS) of the catchment area GeoDataFrame to the specified CRS.

   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame
   :param to_crs: Coordinate Reference System (CRS) code to convert the catchment area to. Default is 2193.
   :type to_crs: int = 2193

   :returns: A GeoDataFrame representing the catchment area with the transformed CRS.
   :rtype: gpd.GeoDataFrame


.. py:function:: find_flooded_buildings(engine: sqlalchemy.engine.Engine, area_of_interest: geopandas.GeoDataFrame, flood_model_output_path: pathlib.Path, flood_depth_threshold: float) -> pandas.DataFrame

   Creates a building DataFrame with attribute "is_flooded",
   depending on if the area for each building is flooded to a depth greater than or equal to flood_depth_threshold.
   the index, building_outline_id, matches building_outline_id from nz_building_outline table.

   :param engine: The sqlalchemy database connection engine
   :type engine: Engine
   :param area_of_interest: A GeoDataFrame with a polygon specifying the area to get buildings for.
   :type area_of_interest: gpd.GeoDataFrame
   :param flood_model_output_path: Path to the flood model output file to be read.
   :type flood_model_output_path: pathlib.Path
   :param flood_depth_threshold: The minimum depth required to designate a pixel in the raster as flooded.
   :type flood_depth_threshold: float

   :returns: A pd.DataFrame specifying if each building is flooded or not.
   :rtype: pd.DataFrame


.. py:function:: store_flooded_buildings_in_database(engine: sqlalchemy.engine.Engine, buildings: pandas.DataFrame, flood_model_id: int) -> None

   Appends the details of which buildings are flooded for a given flood_model_id to the database

   :param engine: The sqlalchemy database connection engine
   :type engine: Engine
   :param buildings: DataFrame containing a mapping of building_ids to their flood status for the current model run
   :type buildings: pd.DataFrame
   :param flood_model_id: The id of the current flood model run, to associate with the building flood data.
   :type flood_model_id: float

   :returns: This function does not return anything
   :rtype: None


.. py:function:: add_model_output_to_geoserver(model_output_path: pathlib.Path, model_id: int) -> None

   Adds the model output max depths to GeoServer, ready for serving.
   The GeoServer layer name will be f"Output_{model_id}" and the workspace name will be "{db_name}-dt-model-outputs"

   :param model_output_path: The file path to the model output to serve.
   :type model_output_path: pathlib.Path
   :param model_id: The database id of the model output.
   :type model_id: int

   :returns: This function does not return anything
   :rtype: None


.. py:data:: log

.. py:data:: Base

.. py:function:: get_valid_bg_flood_dir() -> pathlib.Path

   Get the valid BG-Flood Model directory.

   :returns: The valid BG-Flood Model directory.
   :rtype: pathlib.Path

   :raises FileNotFoundError: If the BG-Flood Model directory is not found or is not a valid directory.


.. py:function:: get_new_model_output_path() -> pathlib.Path

   Get a new file path for saving the BG Flood model output with the current timestamp included in the filename.

   :returns: The path to the BG Flood model output file.
   :rtype: pathlib.Path


.. py:function:: get_model_output_metadata(model_output_path: pathlib.Path, catchment_area: geopandas.GeoDataFrame) -> Tuple[str, str, str]

   Get metadata related to the BG Flood model output.

   :param model_output_path: The path to the BG Flood model output file.
   :type model_output_path: pathlib.Path
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame

   :returns: A tuple containing three elements: the name of the BG Flood model output file, its absolute path as a string,
             and the Well-Known Text (WKT) representation of the catchment area's geometry.
   :rtype: Tuple[str, str, str]


.. py:function:: store_model_output_metadata_to_db(engine: sqlalchemy.engine.Engine, model_output_path: pathlib.Path, catchment_area: geopandas.GeoDataFrame) -> int

   Store metadata related to the BG Flood model output in the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param model_output_path: The path to the BG Flood model output file.
   :type model_output_path: pathlib.Path
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame

   :returns: Returns the model id of the new flood_model produced
   :rtype: int


.. py:function:: model_output_from_db_by_id(engine: sqlalchemy.engine.Engine, model_id: int) -> pathlib.Path

   Retrieves the path to the model output file from the database by model_id

   :param engine: The sqlalchemy database connection engine
   :type engine: Engine
   :param model_id: The ID of the flood model output being queried for
   :type model_id: int

   :returns: The path to the model output file
   :rtype: pathlib.Path


.. py:function:: model_extents_from_db_by_id(engine: sqlalchemy.engine.Engine, model_id: int) -> geopandas.GeoDataFrame

   Finds the extents of a model output in gpd.GeoDataFrame format

   :param engine: The sqlalchemy database connection engine
   :type engine: Engine
   :param model_id: The ID of the flood model output being queried for
   :type model_id: int

   :returns: Returns the geometry (extents) of the flood model output.
   :rtype: gpd.GeoDataFrame


.. py:function:: add_crs_to_model_output(engine: sqlalchemy.engine.Engine, flood_model_output_id: int) -> None

   Add Coordinate Reference System (CRS) to the BG-Flood model output.

   :param engine: The sqlalchemy database connection engine
   :type engine: Engine
   :param flood_model_output_id: The ID of the flood model output being queried for
   :type flood_model_output_id: int

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: process_rain_input_files(bg_flood_dir: pathlib.Path, param_file: TextIO) -> None

   Process rain input files and write their parameter values to the BG-Flood parameter file.

   :param bg_flood_dir: The BG-Flood model directory containing the rain input files.
   :type bg_flood_dir: pathlib.Path
   :param param_file: The file object representing the parameter file where the parameter values will be written.
   :type param_file: TextIO

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: process_boundary_input_files(bg_flood_dir: pathlib.Path, param_file: TextIO) -> None

   Process uniform boundary input files and write their parameter values to the BG-Flood parameter file.

   :param bg_flood_dir: The BG-Flood model directory containing the uniform boundary input files.
   :type bg_flood_dir: pathlib.Path
   :param param_file: The file object representing the parameter file where the parameter values will be written.
   :type param_file: TextIO

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: process_river_input_files(bg_flood_dir: pathlib.Path, param_file: TextIO) -> None

   Process river input files, rename them, and write their parameter values to the BG-Flood parameter file.

   :param bg_flood_dir: The BG-Flood model directory containing the river input files.
   :type bg_flood_dir: pathlib.Path
   :param param_file: The file object representing the parameter file where the parameter values will be written.
   :type param_file: TextIO

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: prepare_bg_flood_model_inputs(bg_flood_dir: pathlib.Path, model_output_path: pathlib.Path, hydro_dem_path: pathlib.Path, resolution: Union[int, float], output_timestep: Union[int, float], end_time: Union[int, float], mask: Union[int, float] = 9999, gpu_device: int = 0, small_nc: int = 0) -> None

   Prepare inputs for the BG-Flood Model.

   :param bg_flood_dir: The BG-Flood Model directory.
   :type bg_flood_dir: pathlib.Path
   :param model_output_path: The new file path for saving the BG Flood model output with the current timestamp included in the filename.
   :type model_output_path: pathlib.Path
   :param hydro_dem_path: The file path of the Hydrologically conditioned DEM (Hydro DEM) for the specified catchment area.
   :type hydro_dem_path: pathlib.Path,
   :param resolution: The grid resolution in meters for metric grids, representing the size of each grid cell.
   :type resolution: Union[int, float]
   :param output_timestep: Time step between model outputs in seconds. If the value is set to 0 then no output is generated.
   :type output_timestep: Union[int, float]
   :param end_time: Time in seconds when the model stops. If the value is set to 0 then the model initializes but does not run.
   :type end_time: Union[int, float]
   :param mask: The mask value is used to remove blocks from computation where the topography elevation (zb) is greater than
                the specified value. Default value is 9999.0 (no areas are masked).
   :type mask: Union[int, float] = 9999
   :param gpu_device: Specify the GPU device to be used. Default value is 0 (the first available GPU).
                      Set the value to -1 to use the CPU. For other GPUs, use values 2 and above.
   :type gpu_device: int = 0
   :param small_nc: Specify whether the output should be saved as short integers to reduce the size of the output file.
                    Set the value to 1 to enable short integer conversion, or set it to 0 to save all variables as floats.
                    Default value is 0.
   :type small_nc: int = 0

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: run_bg_flood_model(engine: sqlalchemy.engine.Engine, catchment_area: geopandas.GeoDataFrame, model_output_path: pathlib.Path, output_timestep: Union[int, float], end_time: Union[int, float], resolution: Optional[Union[int, float]] = None, mask: Union[int, float] = 9999, gpu_device: int = 0, small_nc: int = 0) -> None

   Run the BG-Flood Model for the specified catchment area.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame
   :param model_output_path: The new file path for saving the BG Flood model output with the current timestamp included in the filename.
   :type model_output_path: pathlib.Path
   :param output_timestep: Time step between model outputs in seconds. If the value is set to 0 then no output is generated.
   :type output_timestep: Union[int, float]
   :param end_time: Time in seconds when the model stops. If the value is set to 0 then the model initializes but does not run.
   :type end_time: Union[int, float]
   :param resolution: The grid resolution in meters for metric grids, representing the size of each grid cell.
                      If not provided (default is None), the resolution of the Hydrologically conditioned DEM will be used as
                      the grid resolution.
   :type resolution: Optional[Union[int, float]] = None
   :param mask: The mask value is used to remove blocks from computation where the topography elevation (zb) is greater than
                the specified value. Default value is 9999.0 (no areas are masked).
   :type mask: Union[int, float] = 9999
   :param gpu_device: Specify the GPU device to be used. Default value is 0 (the first available GPU).
                      Set the value to -1 to use the CPU. For other GPUs, use values 2 and above.
   :type gpu_device: int = 0
   :param small_nc: Specify whether the output should be saved as short integers to reduce the size of the output file.
                    Set the value to 1 to enable short integer conversion, or set it to 0 to save all variables as floats.
                    Default value is 0.
   :type small_nc: int = 0

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: main(selected_polygon_gdf: geopandas.GeoDataFrame, output_timestep: Union[int, float], end_time: Union[int, float], resolution: Optional[Union[int, float]] = None, mask: Union[int, float] = 9999, gpu_device: int = 0, small_nc: int = 0, log_level: src.digitaltwin.utils.LogLevel = LogLevel.DEBUG) -> int

   Generate BG-Flood model output for the requested catchment area, and incorporate the model output to GeoServer
   for visualization.

   :param selected_polygon_gdf: A GeoDataFrame representing the selected polygon, i.e., the catchment area.
   :type selected_polygon_gdf: gpd.GeoDataFrame
   :param output_timestep: Time step between model outputs in seconds. If the value is set to 0 then no output is generated.
   :type output_timestep: Union[int, float]
   :param end_time: Time in seconds when the model stops. If the value is set to 0 then the model initializes but does not run.
   :type end_time: Union[int, float]
   :param resolution: The grid resolution in meters for metric grids, representing the size of each grid cell.
                      If not provided (default is None), the resolution of the Hydrologically conditioned DEM will be used as
                      the grid resolution.
   :type resolution: Optional[Union[int, float]] = None
   :param mask: The mask value is used to remove blocks from computation where the topography elevation (zb) is greater than
                the specified value. Default value is 9999.0 (no areas are masked).
   :type mask: Union[int, float] = 9999
   :param gpu_device: Specify the GPU device to be used. Default value is 0 (the first available GPU).
                      Set the value to -1 to use the CPU. For other GPUs, use values 2 and above.
   :type gpu_device: int = 0
   :param small_nc: Specify whether the output should be saved as short integers to reduce the size of the output file.
                    Set the value to 1 to enable short integer conversion, or set it to 0 to save all variables as floats.
                    Default value is 0.
   :type small_nc: int = 0
   :param log_level: The log level to set for the root logger. Defaults to LogLevel.DEBUG.
                     The available logging levels and their corresponding numeric values are:
                     - LogLevel.CRITICAL (50)
                     - LogLevel.ERROR (40)
                     - LogLevel.WARNING (30)
                     - LogLevel.INFO (20)
                     - LogLevel.DEBUG (10)
                     - LogLevel.NOTSET (0)
   :type log_level: LogLevel = LogLevel.DEBUG

   :returns: Returns the model id of the new flood_model produced
   :rtype: int


.. py:data:: sample_polygon

