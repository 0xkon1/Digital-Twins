src.dynamic_boundary_conditions.river.river_network_to_from_db
==============================================================

.. py:module:: src.dynamic_boundary_conditions.river.river_network_to_from_db

.. autoapi-nested-parse::

   This script handles the following tasks: storing both the REC river network and its associated data in files along with
   their metadata in the database, retrieving the existing REC river network and its associated data from the database,
   and managing the addition of REC geometries that have been excluded from the river network in the database,
   as well as retrieving them for an existing REC river network.



Attributes
----------

.. autoapisummary::

   src.dynamic_boundary_conditions.river.river_network_to_from_db.log


Classes
-------

.. autoapisummary::

   src.dynamic_boundary_conditions.river.river_network_to_from_db.RiverNetworkExclusions
   src.dynamic_boundary_conditions.river.river_network_to_from_db.RiverNetwork


Functions
---------

.. autoapisummary::

   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_env_variable
   src.dynamic_boundary_conditions.river.river_network_to_from_db.check_table_exists
   src.dynamic_boundary_conditions.river.river_network_to_from_db.create_table
   src.dynamic_boundary_conditions.river.river_network_to_from_db.execute_query
   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_next_network_id
   src.dynamic_boundary_conditions.river.river_network_to_from_db.add_network_exclusions_to_db
   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_new_network_output_paths
   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_network_output_metadata
   src.dynamic_boundary_conditions.river.river_network_to_from_db.store_rec_network_to_db
   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_existing_network_metadata_from_db
   src.dynamic_boundary_conditions.river.river_network_to_from_db.get_existing_network


Module Contents
---------------

.. py:function:: get_env_variable(var_name: str, default: T = None, allow_empty: bool = False, cast_to: Type[T] = str) -> T

   Reads an environment variable, with settings to allow defaults, empty values, and type casting
   To read a boolean EXAMPLE_ENV_VAR=False use get_env_variable("EXAMPLE_ENV_VAR", cast_to=bool)

   :param var_name: The name of the environment variable to retrieve.
   :type var_name: str
   :param default: Default return value if the environment variable does not exist. Doesn't override empty string vars.
   :type default: T = None
   :param allow_empty: If False then a KeyError will be raised if the environment variable is empty.
   :type allow_empty: bool
   :param cast_to: The type to cast to e.g. str, int, or bool
   :type cast_to: Type[T]

   :rtype: The environment variable, or default if it does not exist, as type T.

   :raises KeyError: If allow_empty is False and the environment variable is empty string or None
   :raises ValueError: If cast_to is not compatible with the value stored.


.. py:function:: check_table_exists(engine: sqlalchemy.engine.Engine, table_name: str, schema: str = 'public') -> bool

   Check if a table exists in the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param table_name: The name of the table to check for existence.
   :type table_name: str
   :param schema: The name of the schema where the table resides. Defaults to "public".
   :type schema: str = "public"

   :returns: True if the table exists, False otherwise.
   :rtype: bool


.. py:function:: create_table(engine: sqlalchemy.engine.Engine, table: Base) -> None

   Create a table in the database if it doesn't already exist, using the provided engine.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param table: Class representing the table to create.
   :type table: Base

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: execute_query(engine: sqlalchemy.engine.Engine, query) -> None

   Execute the given query on the provided engine using a session.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param query: The query to be executed.

   :returns: This function does not return any value.
   :rtype: None

   :raises Exception: If an error occurs during the execution of the query.


.. py:class:: RiverNetworkExclusions

   Bases: :py:obj:`Base`


   Class representing the 'rec_network_exclusions' table.

   .. attribute:: __tablename__

      Name of the database table.

      :type: str

   .. attribute:: rec_network_id

      An identifier for the river network associated with each new run.

      :type: int

   .. attribute:: objectid

      An identifier for the REC river object matching from the 'rec_data' table.

      :type: int

   .. attribute:: exclusion_cause

      Cause of exclusion, i.e., the reason why the REC river geometry was excluded.

      :type: str

   .. attribute:: geometry

      Geometric representation of the excluded REC river features.

      :type: LineString


   .. py:attribute:: __tablename__
      :value: 'rec_network_exclusions'



   .. py:attribute:: rec_network_id


   .. py:attribute:: objectid


   .. py:attribute:: exclusion_cause


   .. py:attribute:: geometry


   .. py:attribute:: __table_args__


.. py:class:: RiverNetwork

   Bases: :py:obj:`Base`


   Class representing the 'rec_network' table.

   .. attribute:: __tablename__

      Name of the database table.

      :type: str

   .. attribute:: rec_network_id

      An identifier for the river network associated with each new run (primary key).

      :type: int

   .. attribute:: network_path

      Path to the REC river network file.

      :type: str

   .. attribute:: network_data_path

      Path to the REC river network data file for the AOI.

      :type: str

   .. attribute:: created_at

      Timestamp indicating when the output was created.

      :type: datetime

   .. attribute:: geometry

      Geometric representation of the catchment area coverage.

      :type: Polygon


   .. py:attribute:: __tablename__
      :value: 'rec_network'



   .. py:attribute:: rec_network_id


   .. py:attribute:: network_path


   .. py:attribute:: network_data_path


   .. py:attribute:: created_at


   .. py:attribute:: geometry


.. py:data:: log

.. py:function:: get_next_network_id(engine: sqlalchemy.engine.Engine) -> int

   Get the next available REC River Network ID from the River Network Exclusions table.

   :param engine: The engine used to connect to the database.
   :type engine: Engine

   :returns: An identifier for the river network associated with each run, representing the next available River Network ID.
   :rtype: int


.. py:function:: add_network_exclusions_to_db(engine: sqlalchemy.engine.Engine, rec_network_id: int, rec_network_exclusions: geopandas.GeoDataFrame, exclusion_cause: str) -> None

   Add REC geometries that are excluded from the river network for the current run in the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param rec_network_id: An identifier for the river network associated with the current run.
   :type rec_network_id: int
   :param rec_network_exclusions: A GeoDataFrame containing the REC geometries that are excluded from the river network for the current run.
   :type rec_network_exclusions: gpd.GeoDataFrame
   :param exclusion_cause: Cause of exclusion, i.e., the reason why the REC river geometry was excluded.
   :type exclusion_cause: str

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: get_new_network_output_paths() -> Tuple[pathlib.Path, pathlib.Path]

   Get new file paths that incorporate the current timestamp into the filenames for storing both the REC Network and
   its associated data.

   :returns: A tuple containing the file path to the REC Network and the file path to the REC Network data.
   :rtype: Tuple[pathlib.Path, pathlib.Path]


.. py:function:: get_network_output_metadata(network_path: pathlib.Path, network_data_path: pathlib.Path, catchment_area: geopandas.GeoDataFrame) -> Tuple[str, str, str]

   Get metadata associated with the REC Network.

   :param network_path: The path to the REC Network file.
   :type network_path: pathlib.Path
   :param network_data_path: The path to the REC Network data file.
   :type network_data_path: pathlib.Path
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame

   :returns: A tuple containing the absolute path to the REC Network file as a string, the absolute path to the REC Network
             data file as a string, and the Well-Known Text (WKT) representation of the catchment area's geometry.
   :rtype: Tuple[str, str, str]


.. py:function:: store_rec_network_to_db(engine: sqlalchemy.engine.Engine, catchment_area: geopandas.GeoDataFrame, rec_network_id: int, rec_network: networkx.Graph, rec_network_data: geopandas.GeoDataFrame) -> None

   Store both the REC river network and its associated data in files, and their metadata in the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame
   :param rec_network_id: An identifier for the river network associated with the current run.
   :type rec_network_id: int
   :param rec_network: The constructed REC river network, represented as a directed graph (DiGraph).
   :type rec_network: nx.Graph
   :param rec_network_data: A GeoDataFrame containing the REC river network data.
   :type rec_network_data: gpd.GeoDataFrame

   :returns: This function does not return any value.
   :rtype: None


.. py:function:: get_existing_network_metadata_from_db(engine: sqlalchemy.engine.Engine, catchment_area: geopandas.GeoDataFrame) -> geopandas.GeoDataFrame

   Retrieve existing REC river network metadata for the specified catchment area from the database.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param catchment_area: A GeoDataFrame representing the catchment area.
   :type catchment_area: gpd.GeoDataFrame

   :returns: A GeoDataFrame containing the existing REC river network metadata for the specified catchment area.
   :rtype: gpd.GeoDataFrame


.. py:function:: get_existing_network(engine: sqlalchemy.engine.Engine, existing_network_meta: geopandas.GeoDataFrame) -> Tuple[networkx.Graph, geopandas.GeoDataFrame]

   Retrieve existing REC river network and its associated data.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param existing_network_meta: A GeoDataFrame containing the metadata for the existing REC river network.
   :type existing_network_meta: gpd.GeoDataFrame

   :returns: A tuple containing the existing REC river network as a directed graph (DiGraph) and its associated data
             as a GeoDataFrame.
   :rtype: Tuple[nx.Graph, gpd.GeoDataFrame]


