# This workflow will install Python dependencies, run tests, lint, and perform static code analysis
# All unit tests found in the tests/ directory are run.
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run tests

on: push

jobs:
  linting-flake8:
    # Lints the Python files, checking for style and correctness
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install flake8
        run: |
          python -m pip install flake8
      - name: Run lint with flake8
        run: |
          flake8 src --show-source --count --statistics --max-line-length=120

  docker-tests:
    # Starts the database, builds the testing docker image and runs all unit tests using docker
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8 ]

    steps:
      - uses: actions/checkout@v2
      - name: Start database
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db
        run: |
          docker-compose up -d db_postgres
      - name: Build unit test image
        run: |
          docker build -t unit_test -f Dockerfile.unittest tests/test_setup_environment.py
      - name: Create .env file with API keys
        env:
          ENV_BASE64: ${{ secrets.ENV_BASE64 }}
        run: |
          echo import .env file from secrets and regenerate the file
          echo $ENV_BASE64 | base64 -d > .env
      - name: Run unit tests
        run: |
          docker run --network="host" unit_test

    python-tests:
      # Runs Python only tests
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash -l {0}
      strategy:
        fail-fast: false
        matrix:
          python-version: [ 3.8 ]

      steps:
        - uses: actions/checkout@v2
        - name: Load conda cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conda-env
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.cache-name }}-${{ hashFiles('environment.yml') }}
        - name: Conda environment setup
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: geofabrics
          environment-file: environment_linux.yml
          auto-activate-base: false
          channels: conda-forge
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
        - run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
        - name: Install test dependencies
        run: |
          mamba install flake8 pytest
        - name: Create .env file with API keys
          env:
            ENV_BASE64: ${{ secrets.ENV_BASE64 }}
          run: |
            echo import .env file from secrets and regenerate the file
            echo $ENV_BASE64 | base64 -d > .env
        - name: Run python tests with pytest
        run: |
          pytest tests/test_run_geofabric.py

  sonarcloud:
    # Runs static-code analysis on SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
